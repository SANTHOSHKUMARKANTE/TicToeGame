import java.util.*;

// TicTacToe class encapsulating the game board and related methods
class TicTacToe 
{
    static char[][] board; // Encapsulation: Private static field to encapsulate the game board

    // Constructor to initialize the board
    public TicTacToe()
    {
        board = new char[3][3];
        initBoard();
    }

    // Initialize the board with empty cells
    void initBoard() // Abstraction: Method to initialize the board
    {
        for (int i = 0; i < board.length; i++) 
        {
            for (int j = 0; j < board[i].length; j++) 
            {
                board[i][j]=' ';
            }
        }
    }

    // Display the board with current values
    static void dipBoard() // Abstraction: Method to display the board
    {
        System.out.println("-------------");
        for (int i = 0; i < board.length; i++) 
        {
            System.out.print("| ");
            for (int j = 0; j < board[i].length; j++) 
            {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    // Place a mark either `X` or `O` on the board
    static void placeMark(int row, int col, char mark) // Encapsulation: Method to place a mark on the board
    {
        if (row>=0 && row<=2 && col>=0 && col<=2) 
        {
            board[row][col]=mark;
        }
        else
        {
            System.out.println("Invalid Position");
        }
    } 
    
    // Check if there's a win in columns
    static boolean checkColWin() // Encapsulation: Method to check column-wise win
    {
        for (int j = 0; j <= 2; j++) 
        {
            if (board[0][j]!=' ' && board[0][j] == board[1][j] && board[1][j] == board[2][j]) 
            {
                return true;
            }
        }
        return false;
    }

    // Check if there's a win in rows
    static boolean checkRowWin() // Encapsulation: Method to check row-wise win
    {
        for (int i = 0; i <= 2; i++) 
        {
            if (board[i][0]!=' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) 
            {
                return true;
            }
        }
        return false;
    }

    // Check if there's a win in diagonals
    static boolean checkDiagWin() // Encapsulation: Method to check diagonal-wise win
    {
        if ((board[0][0]!=' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) || board[0][2]!=' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return true;
        }
        return false;
    }

    // Check if the game is a draw
    static boolean checkDraw() // Encapsulation: Method to check draw
    {
        for (int i = 0; i <=2; i++) {
            for (int j = 0; j <=2; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return  true;
    }
}

// Player abstract class representing a player in the game
abstract class Player
{
    String name; // Encapsulation: Player's name
    char mark;   // Encapsulation: Player's mark (X or O)

    abstract void makeMove(); // Abstraction: Abstract method for making a move

    // Check if the move is valid
    boolean isValidMove(int row, int col) // Encapsulation: Method to check valid move
    {
        if(row>=0 && row<=2 && col>=0 && col<=2)
        {
            if (TicTacToe.board[row][col] == ' ') 
            {
                return true;
            }
        }
        return false;
    }
}

// Human Player class inheriting from Player class
class HumanPlayer extends Player
{
    // Constructor
    HumanPlayer(String name, char mark)
    {
        this.name=name;
        this.mark=mark;
    }

    // Make a move
    void makeMove() // Encapsulation: Method to make a move
    {
        int row;
        int col;
        Scanner scan = new Scanner(System.in);
        do
        {
            System.out.println("Enter the row and col");
            row = scan.nextInt();
            col = scan.nextInt();
        }
        while(!isValidMove(row, col)); 

        TicTacToe.placeMark(row, col, mark);
    } 
}

// AI Player class inheriting from Player class
class AIPlayer extends Player
{
    // Constructor
    AIPlayer(String name, char mark)
    {
        this.name=name;
        this.mark=mark;
    }

    // Make a move
    void makeMove() // Encapsulation: Method to make a move
    {
        int row;
        int col;
        Scanner scan = new Scanner(System.in);
        do
        {
            Random r = new Random();
            row = r.nextInt(3);
            col = r.nextInt(3);
        }
        while(!isValidMove(row, col)); 

        TicTacToe.placeMark(row, col, mark);
    }
}

// Main class
public class LaunchGame 
{
    public static void main(String[] args) 
    {
        TicTacToe t = new TicTacToe();

        HumanPlayer p1 = new HumanPlayer("Bob", 'X');
        AIPlayer p2 = new AIPlayer("TAI", 'O');

        Player cp; // Encapsulation: Declaration of a variable with a superclass type

        cp=p1; // Polymorphism: Assignment of a subclass object to a superclass variable

        while (true) 
        {
            System.out.println(cp.name + " turn");
            cp.makeMove();
            TicTacToe.dipBoard();

            if (TicTacToe.checkColWin() || TicTacToe.checkRowWin() || TicTacToe.checkDiagWin()) 
            {
                System.out.println(cp.name + " Has won");
                break;
            }
            else if (TicTacToe.checkDraw()) {
                System.out.println("Game is a Draw");
                break;
            }
            else
            {
                if (cp==p1) 
                {
                    cp=p2;
                }
                else{
                    cp=p1;
                }
            }
        }
    }
}
